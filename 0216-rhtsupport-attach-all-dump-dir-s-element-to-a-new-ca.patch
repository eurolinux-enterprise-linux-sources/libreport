From 5fd0ffcedd6eff806d2aa585be89c72474971398 Mon Sep 17 00:00:00 2001
From: Matej Habrnal <mhabrnal@redhat.com>
Date: Wed, 24 Feb 2016 13:57:44 +0100
Subject: [PATCH] rhtsupport: attach all dump dir's element to a new case

Before this commit there were attached only binary files and an xml file which
contains all text dump dir's files at once.
With this commit reporter-rhtsupport attaching all dump dir's files separately.

Because we don't know if someone uses the xml file, the reporter attaches the
xml files as well.

Related to: rhbz#1261398

Signed-off-by: Matej Habrnal <mhabrnal@redhat.com>
---
 src/plugins/reporter-rhtsupport.c |   35 +++++++++++++++++++++++++++--------
 1 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/src/plugins/reporter-rhtsupport.c b/src/plugins/reporter-rhtsupport.c
index d48af1a..8083832 100644
--- a/src/plugins/reporter-rhtsupport.c
+++ b/src/plugins/reporter-rhtsupport.c
@@ -73,7 +73,8 @@ static report_result_t *get_reported_to(const char *dump_dir_name)
 }
 
 static
-int create_tarball(const char *tempfile, problem_data_t *problem_data)
+int create_tarball(const char *tempfile, struct dump_dir *dd,
+     problem_data_t *problem_data)
 {
     reportfile_t *file = NULL;
     int retval = 0; /* everything is ok so far .. */
@@ -125,15 +126,28 @@ int create_tarball(const char *tempfile, problem_data_t *problem_data)
                         /*binding_name     */ name,
                         /*recorded_filename*/ xml_name,
                         /*binary           */ 1);
-                if (tar_append_file(tar, (char*)content, xml_name) != 0)
-                {
-                    free(xml_name);
-                    goto ret_fail;
-                }
                 free(xml_name);
             }
         }
     }
+
+    /* append all files from dump dir */
+    dd_init_next_file(dd);
+    char *short_name, *full_name;
+    while (dd_get_next_file(dd, &short_name, &full_name))
+    {
+        char *uploaded_name = concat_path_file("content", short_name);
+        free(short_name);
+
+        if (tar_append_file(tar, full_name, uploaded_name) != 0)
+        {
+            free(full_name);
+            goto ret_fail;
+        }
+
+        free(full_name);
+    }
+
     const char *signature = reportfile_as_string(file);
     /*
      * Note: this pointer points to string which is owned by
@@ -199,6 +213,7 @@ ret_fail:
     }
 
 ret_clean:
+    dd_close(dd);
     /* now it's safe to free file */
     free_reportfile(file);
     return retval;
@@ -783,7 +798,11 @@ int main(int argc, char **argv)
 
     /* Gzipping e.g. 0.5gig coredump takes a while. Let user know what we are doing */
     log(_("Compressing data"));
-    if (create_tarball(tempfile, problem_data) != 0)
+    struct dump_dir *dd = dd_opendir(dump_dir_name, /*flags:*/ 0);
+    if (!dd)
+        xfunc_die(); /* error msg is already logged by dd_opendir */
+
+    if (create_tarball(tempfile, dd, problem_data) != 0)
     {
         errmsg = _("Can't create temporary file in /tmp");
         goto ret;
@@ -841,7 +860,7 @@ int main(int argc, char **argv)
         }
         /* No error in case creation */
         /* Record "reported_to" element */
-        struct dump_dir *dd = dd_opendir(dump_dir_name, /*flags:*/ 0);
+        dd = dd_opendir(dump_dir_name, /*flags:*/ 0);
         if (dd)
         {
             struct report_result rr = { .label = (char *)"RHTSupport" };
-- 
1.7.1

