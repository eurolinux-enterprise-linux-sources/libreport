From fbb85907e5cc56c61e7714458bdff2b727313444 Mon Sep 17 00:00:00 2001
From: Jakub Filak <jfilak@redhat.com>
Date: Tue, 29 May 2012 16:32:12 +0200
Subject: [PATCH 35/53] track#542, track#544 : teach reporter-ureport upload
 ureport and parse response

Signed-off-by: Jakub Filak <jfilak@redhat.com>
---
 src/lib/abrt_curl.c   | 21 ++++++++++-
 src/lib/abrt_curl.h   | 11 ++++++
 src/lib/json.c        |  4 +--
 src/plugins/ureport.c | 99 +++++++++++++++++++++++++++++++++++++++++++--------
 4 files changed, 118 insertions(+), 17 deletions(-)

diff --git a/src/lib/abrt_curl.c b/src/lib/abrt_curl.c
index 9ec77d1..1ae773d 100644
--- a/src/lib/abrt_curl.c
+++ b/src/lib/abrt_curl.c
@@ -362,6 +362,24 @@ abrt_post(abrt_post_state_t *state,
 //FIXME:
             error_msg_and_die("out of memory or read error (curl_formadd error code: %d)", (int)curlform_err);
         xcurl_easy_setopt_ptr(handle, CURLOPT_HTTPPOST, post);
+    } else if (data_size == ABRT_POST_DATA_STRING_AS_FORM_DATA) {
+        CURLFORMcode curlform_err = curl_formadd(&post, &last,
+                        CURLFORM_PTRNAME, "file", // element name
+                        // curl bug - missing filename 
+                        // http://curl.haxx.se/mail/lib-2011-07/0176.html
+                        // https://github.com/bagder/curl/commit/45d883d
+                        // fixed in curl-7.22.0~144
+                        // tested with curl-7.24.0-3
+                        // should be working on F17
+                        CURLFORM_BUFFER, "*buffer*", // provides filename
+                        CURLFORM_BUFFERPTR, data,
+                        CURLFORM_BUFFERLENGTH, (long)strlen(data),
+//FIXME: what if file size doesn't fit in long?
+                        CURLFORM_CONTENTTYPE, content_type,
+                        CURLFORM_END);
+        if (curlform_err != 0)
+            error_msg_and_die("out of memory or read error (curl_formadd error code: %d)", (int)curlform_err);
+        xcurl_easy_setopt_ptr(handle, CURLOPT_HTTPPOST, post);
     } else {
         // .. from a blob in memory
         xcurl_easy_setopt_ptr(handle, CURLOPT_POSTFIELDS, data);
@@ -375,7 +393,8 @@ abrt_post(abrt_post_state_t *state,
     struct curl_slist *httpheader_list = NULL;
 
     // Override "Content-Type:"
-    if (data_size != ABRT_POST_DATA_FROMFILE_AS_FORM_DATA)
+    if (data_size != ABRT_POST_DATA_FROMFILE_AS_FORM_DATA
+        && data_size != ABRT_POST_DATA_STRING_AS_FORM_DATA)
     {
         char *content_type_header = xasprintf("Content-Type: %s", content_type);
         // Note: curl_slist_append() copies content_type_header
diff --git a/src/lib/abrt_curl.h b/src/lib/abrt_curl.h
index dfca303..ca3c5b8 100644
--- a/src/lib/abrt_curl.h
+++ b/src/lib/abrt_curl.h
@@ -60,6 +60,7 @@ enum {
     ABRT_POST_DATA_STRING = -1,
     ABRT_POST_DATA_FROMFILE = -2,
     ABRT_POST_DATA_FROMFILE_AS_FORM_DATA = -3,
+    ABRT_POST_DATA_STRING_AS_FORM_DATA = -4,
 };
 int
 abrt_post(abrt_post_state_t *state,
@@ -79,6 +80,16 @@ abrt_post_string(abrt_post_state_t *state,
                      str, ABRT_POST_DATA_STRING);
 }
 static inline int
+abrt_post_string_as_form_data(abrt_post_state_t *state,
+                const char *url,
+                const char *content_type,
+                const char **additional_headers,
+                const char *str)
+{
+    return abrt_post(state, url, content_type, additional_headers,
+                     str, ABRT_POST_DATA_STRING_AS_FORM_DATA);
+}
+static inline int
 abrt_post_file(abrt_post_state_t *state,
                 const char *url,
                 const char *content_type,
diff --git a/src/lib/json.c b/src/lib/json.c
index 40058eb..a44c75d 100644
--- a/src/lib/json.c
+++ b/src/lib/json.c
@@ -237,14 +237,14 @@ abrt_post_state_t *post_ureport(problem_data_t *pd, const char *ureport_url)
                                      | ABRT_POST_WANT_ERROR_MSG);
 
     static const char *headers[] = {
-        "Accept: text/plain",
+        "Accept: application/json",
         "Connection: close",
         NULL,
     };
 
     char *json_ureport = new_json_ureport(pd);
 
-    abrt_post_string(post_state, ureport_url, "application/json",
+    abrt_post_string_as_form_data(post_state, ureport_url, "application/json",
                      headers, json_ureport);
 
     free(json_ureport);
diff --git a/src/plugins/ureport.c b/src/plugins/ureport.c
index f0a6428..a8ac472 100644
--- a/src/plugins/ureport.c
+++ b/src/plugins/ureport.c
@@ -17,9 +17,52 @@
     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 
+#include <json/json.h>
 #include "internal_libreport.h"
 #include "abrt_curl.h"
 
+enum response_type
+{
+    UREPORT_SERVER_RESP_UNKNOWN_TYPE,
+    UREPORT_SERVER_RESP_KNOWN,
+    UREPORT_SERVER_RESP_ERROR,
+};
+
+struct ureport_server_response {
+    enum response_type type;
+    const char *value;
+};
+
+/*
+ * Reponse samples:
+ * {"error":"field 'foo' is required"}
+ * {"response":"true"}
+ * {"response":"false"}
+ */
+static bool ureport_server_parse_json(json_object *json, struct ureport_server_response *out_response)
+{
+    json_object *obj = json_object_object_get(json, "error");
+
+    if (obj)
+    {
+        out_response->type = UREPORT_SERVER_RESP_ERROR;
+        out_response->value = json_object_to_json_string(obj);
+        return true;
+    }
+
+    obj = json_object_object_get(json, "result");
+
+    if (obj)
+    {
+        out_response->type = UREPORT_SERVER_RESP_KNOWN;
+        out_response->value = json_object_to_json_string(obj);
+        return true;
+    }
+
+    out_response->type = UREPORT_SERVER_RESP_UNKNOWN_TYPE;
+    return false;
+}
+
 int main(int argc, char **argv)
 {
     abrt_init(argv);
@@ -63,26 +106,54 @@ int main(int argc, char **argv)
         }
     }
 
-    char *line = strtok(post_state->body, "\n");
-    int ret = 0;
-    while (line)
+    int ret = 1; /* return 1 by default */
+    json_object *const json = json_tokener_parse(post_state->body);
+
+    if (is_error(json))
     {
-        if (!prefixcmp(line, "ERROR "))
-        {
-            ret = 1;
-            break;
-        }
+        error_msg("fatal: unable to parse response from ureport server");
+        goto err;
+    }
 
-        if (!prefixcmp(line, "NEEDMORE"))
-        {
-            log("%s", line);
+    struct ureport_server_response response = {
+        .type=UREPORT_SERVER_RESP_UNKNOWN_TYPE,
+        .value=NULL,
+    };
+
+    const bool is_valid_response = ureport_server_parse_json(json, &response);
+
+    if (!is_valid_response)
+    {
+        error_msg("fatal: wrong format of response from ureport server");
+        goto format_err;
+    }
+
+    switch (response.type)
+    {
+        case UREPORT_SERVER_RESP_KNOWN:
+            VERB1 log("is known: %s", response.value);
             ret = 0;
+            /* If a reported problem is not known then emit NEEDMORE */
+            if (strcmp("true",response.value))
+                log("NEEDMORE");
+            break;
+        case UREPORT_SERVER_RESP_ERROR:
+            VERB1 log("server side error: %s", response.value);
+            ret = 1; /* just to be sure */
+            break;
+        case UREPORT_SERVER_RESP_UNKNOWN_TYPE:
+            error_msg("invalid server response: %s", response.value);
+            ret = 1; /* just to be sure */
+            break;
+        default:
+            error_msg("reporter internal error: missing handler for response type");
+            ret = 1; /* just to be sure */
             break;
-        }
-
-        line = strtok(NULL, "\n");
     }
 
+format_err:
+    json_object_put(json);
+err:
     free_abrt_post_state(post_state);
 
     return ret;
-- 
1.7.11.2

