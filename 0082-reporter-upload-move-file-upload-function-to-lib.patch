From 4ed4e39285da4a8af1f40fbc403a32469b8371b0 Mon Sep 17 00:00:00 2001
From: Denys Vlasenko <dvlasenk@redhat.com>
Date: Wed, 27 Mar 2013 13:03:02 +0100
Subject: [RHEL6 LIBREPORT PATCH 82/94] reporter-upload: move file upload
 function to lib/

This patch moves send_file() out of reporter-upload
into lib/curl.c and renames it to upload_file().
It returns new URL or NULL on error.

Signed-off-by: Denys Vlasenko <dvlasenk@redhat.com>
Signed-off-by: Jiri Moskovcak <jmoskovc@redhat.com>
---
 src/lib/abrt_curl.c           | 56 +++++++++++++++++++++++++++++++++++++++++++
 src/lib/abrt_curl.h           |  3 +++
 src/plugins/reporter-upload.c | 56 +++----------------------------------------
 3 files changed, 62 insertions(+), 53 deletions(-)

diff --git a/src/lib/abrt_curl.c b/src/lib/abrt_curl.c
index eafdb6e..35a7546 100644
--- a/src/lib/abrt_curl.c
+++ b/src/lib/abrt_curl.c
@@ -538,3 +538,59 @@ abrt_post(abrt_post_state_t *state,
 
     return response_code;
 }
+
+/* Unlike post_file(),
+ * this function will use PUT, not POST if url is "http(s)://..."
+ */
+char *upload_file(const char *url, const char *filename)
+{
+    /* we don't want to print the whole url as it may contain password
+     * rhbz#856960
+     * there can be '@' in the login or password so let's try to find the
+     * first '@' from the end
+     */
+    const char *clean_url = strrchr(url, '@');
+    if (clean_url)
+        clean_url++;
+    else
+        clean_url = url;
+
+    log(_("Sending %s to %s"), filename, clean_url);
+
+    char *whole_url;
+    unsigned len = strlen(url);
+    if (len > 0 && url[len-1] == '/')
+        whole_url = concat_path_file(url, strrchr(filename, '/') ? : filename);
+    else
+        whole_url = xstrdup(url);
+
+    abrt_post_state_t *state = new_abrt_post_state(ABRT_POST_WANT_ERROR_MSG);
+    abrt_post(state,
+                whole_url,
+                /*content_type:*/ "???",
+                /*additional_headers:*/ NULL,
+                /*data:*/ filename,
+                ABRT_POST_DATA_FROMFILE_PUT
+    );
+
+    int error = (state->curl_result != 0);
+    if (error)
+    {
+	if (state->curl_error_msg)
+            error_msg("Error while uploading: '%s'", state->curl_error_msg);
+        else
+            /* for example, when source file can't be opened */
+            error_msg("Error while uploading");
+        free(whole_url);
+        whole_url = NULL;
+    }
+    else
+    {
+        /* This ends up a "reporting status message" in abrtd */
+        log(_("Successfully sent %s to %s"), filename, clean_url);
+    }
+
+    free_abrt_post_state(state);
+
+    return whole_url;
+}
diff --git a/src/lib/abrt_curl.h b/src/lib/abrt_curl.h
index 720602d..68ed09e 100644
--- a/src/lib/abrt_curl.h
+++ b/src/lib/abrt_curl.h
@@ -117,6 +117,9 @@ abrt_post_file_as_form(abrt_post_state_t *state,
                      filename, ABRT_POST_DATA_FROMFILE_AS_FORM_DATA);
 }
 
+#define upload_file libreport_upload_file
+char *upload_file(const char *url, const char *filename);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/plugins/reporter-upload.c b/src/plugins/reporter-upload.c
index bb9ee7f..7c8bf15 100644
--- a/src/plugins/reporter-upload.c
+++ b/src/plugins/reporter-upload.c
@@ -20,58 +20,6 @@
 #include "abrt_curl.h"
 #include "internal_libreport.h"
 
-static int send_file(const char *url, const char *filename)
-{
-    /* we don't want to print the whole url as it may contain password
-     * rhbz#856960
-     * there can be '@' in the login or password so let's try to find the
-     * first '@' from the end
-     */
-    const char *clean_url = strrchr(url, '@');
-    if (clean_url)
-        clean_url++;
-    else
-        clean_url = url;
-
-    log(_("Sending %s to %s"), filename, clean_url);
-
-    char *whole_url;
-    unsigned len = strlen(url);
-    if (len > 0 && url[len-1] == '/')
-        whole_url = concat_path_file(url, strrchr(filename, '/') ? : filename);
-    else
-        whole_url = xstrdup(url);
-
-    abrt_post_state_t *state = new_abrt_post_state(ABRT_POST_WANT_ERROR_MSG);
-    abrt_post(state,
-                whole_url,
-                /*content_type:*/ "???",
-                /*additional_headers:*/ NULL,
-                /*data:*/ filename,
-                ABRT_POST_DATA_FROMFILE_PUT
-    );
-    free(whole_url);
-
-    int error = (state->curl_result != 0);
-    if (error)
-    {
-	if (state->curl_error_msg)
-            error_msg("Error while uploading: '%s'", state->curl_error_msg);
-        else
-            /* for example, when source file can't be opened */
-            error_msg("Error while uploading");
-    }
-    else
-    {
-        /* This ends up a "reporting status message" in abrtd */
-        log(_("Successfully sent %s to %s"), filename, clean_url);
-    }
-
-    free_abrt_post_state(state);
-
-    return error;
-}
-
 static int create_and_upload_archive(
                 const char *dump_dir_name,
                 map_string_h *settings)
@@ -183,7 +131,9 @@ static int create_and_upload_archive(
     /* Upload from /tmp to /tmp + deletion -> BAD, exclude this possibility */
     if (url && url[0] && strcmp(url, "file:///tmp/") != 0)
     {
-        result = send_file(url, tempfile);
+        char *remote_name = upload_file(url, tempfile);
+        result = (remote_name == NULL); /* error if NULL */
+        free(remote_name);
         /* cleanup code will delete tempfile */
     }
     else
-- 
1.8.2.1

