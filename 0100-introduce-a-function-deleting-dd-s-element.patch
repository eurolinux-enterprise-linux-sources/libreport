From fed56e21b4480c50658a5ad76be9ea10915120e6 Mon Sep 17 00:00:00 2001
From: Jakub Filak <jfilak@redhat.com>
Date: Thu, 29 Nov 2012 09:36:41 +0100
Subject: [RHEL6 LIBREPORT PATCH 100/103] introduce a function deleting dd's
 element

- required for abrt-python Python API
- required for implementation of abrt's DeleteElement D-Bus method.
- trac#754

Signed-off-by: Jakub Filak <jfilak@redhat.com>
Signed-off-by: Richard Marko <rmarko@fedoraproject.org>

Conflicts:
	src/include/dump_dir.h
	src/lib/dump_dir.c
---
 src/include/dump_dir.h |  5 +++++
 src/lib/dump_dir.c     | 18 ++++++++++++++++++
 2 files changed, 23 insertions(+)

diff --git a/src/include/dump_dir.h b/src/include/dump_dir.h
index 26a161b..05c1413 100644
--- a/src/include/dump_dir.h
+++ b/src/include/dump_dir.h
@@ -68,6 +68,11 @@ char* dd_load_text_ext(const struct dump_dir *dd, const char *name, unsigned fla
 char* dd_load_text(const struct dump_dir *dd, const char *name);
 void dd_save_text(struct dump_dir *dd, const char *name, const char *data);
 void dd_save_binary(struct dump_dir *dd, const char *name, const char *data, unsigned size);
+/* Deletes an item from dump directory
+ * On success, zero is returned. On error, -1 is returned, and errno is set appropriately.
+ * For more about errno see unlink documentation
+ */
+int dd_delete_item(struct dump_dir *dd, const char *name);
 /* Returns 0 if directory is deleted or not found */
 int dd_delete(struct dump_dir *dd);
 
diff --git a/src/lib/dump_dir.c b/src/lib/dump_dir.c
index e1af555..93734c5 100644
--- a/src/lib/dump_dir.c
+++ b/src/lib/dump_dir.c
@@ -790,6 +790,24 @@ void dd_save_binary(struct dump_dir* dd, const char* name, const char* data, uns
     free(full_path);
 }
 
+
+int dd_delete_item(struct dump_dir *dd, const char *name)
+{
+    char *path = concat_path_file(dd->dd_dirname, name);
+    int res = unlink(path);
+
+    if (res < 0)
+    {
+        if (errno == ENOENT)
+            res = 0;
+        else
+            perror_msg("Can't delete file '%s'", path);
+    }
+
+    free(path);
+    return res;
+}
+
 DIR *dd_init_next_file(struct dump_dir *dd)
 {
 //    if (!dd->locked)
-- 
1.8.3.1

